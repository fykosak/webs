import React, { memo, useCallback, useContext, useEffect, useMemo, useState } from 'react';
import { createPortal } from 'react-dom';
import { useData } from '../ApiResults/use-data';
import { useTeamPoints } from '../ApiResults/use-team-points';
import { CountdownPortalContext, LangContext } from './main';
import { Team } from '../ApiResults/team-interface';
import { DataInterface, isDataInterfaceVisible } from '../ApiResults/data-interface';

export const App: React.FC<{ url: string, teams: Team[], results: DataInterface }> = memo(({ url, teams, results }) => {
    const data = useData(url, results);
    const showLive = data && new Date(data.times.gameEnd).getTime() > new Date().getTime();
    const lang = useContext(LangContext);
    return <>
        {showLive && <p>{lang === 'cs' ? 'Výsledky jsou živě ze soutěže' : 'Results are live from the competition'}</p>}
        {isDataInterfaceVisible(data) ? <ForVisibleResults data={data} teams={teams} /> :
            <ForHiddenResults data={data} />}
        <CountDownPortal results={results} />
    </>
});

const CountDownPortal: React.FC<{ results: DataInterface }> = memo(({ results }) => {
    const element = useContext(CountdownPortalContext);

    const [, stateTrigger] = useState<object>({});
    useEffect(() => {
        const interval = setInterval(() => stateTrigger({}), 1000);
        return () => clearInterval(interval);
    }, []);

    let diff = new Date(results.times.gameEnd).getTime() - new Date().getTime();
    const after = diff < 0;

    const hours = Math.floor(diff / (1000 * 60 * 60));
    diff -= hours * (1000 * 60 * 60);
    const minutes = Math.floor(diff / (1000 * 60));
    diff -= minutes * (1000 * 60);
    const seconds = Math.floor(diff / 1000);

    return createPortal(after || <span>
        {String(hours).padStart(2, '0')}:
        {String(minutes).padStart(2, '0')}:
        {String(seconds).padStart(2, '0')}
    </span>, element);
});

/**
 * Generates SQL for FKSDB because it seemed faster than generating on the server side
 * @param points
 */
function generateSQL(points: ReturnType<typeof useTeamPoints> | null) {
    let participated = [9086, 9088, 9089, 9090, 9091, 9098, 9102, 9105, 9106, 9110, 9111, 9113, 9116, 9120, 9121, 9122, 9123, 9124, 9125, 9128, 9133, 9134, 9135, 9136, 9137, 9144, 9147, 9148, 9149, 9150, 9154, 9155, 9156, 9157, 9161, 9163, 9165, 9166, 9168, 9169, 9170, 9171, 9172, 9173, 9181, 9182, 9183, 9184, 9185, 9187, 9192, 9195, 9205, 9206, 9207, 9208, 9211, 9212, 9213, 9216, 9218, 9220, 9221, 9227, 9234, 9236, 9237, 9239, 9247, 9248, 9249, 9255, 9257, 9258, 9259, 9266, 9267, 9268, 9276, 9277, 9278, 9279, 9280, 9290, 9291, 9301, 9319, 9320, 9325, 9327, 9328, 9330, 9331, 9332, 9335, 9340, 9346, 9347, 9349, 9350, 9351, 9355, 9356, 9357, 9358, 9359, 9360, 9361, 9362, 9366, 9367, 9368, 9369, 9371, 9372, 9377, 9378, 9381, 9382, 9383, 9384, 9385, 9386, 9389, 9392, 9393, 9395, 9396, 9398, 9402, 9403, 9406, 9407, 9409, 9410, 9416, 9417, 9425, 9427, 9429, 9436, 9438, 9439, 9465, 9466, 9471, 9476, 9478, 9486, 9487, 9488, 9493, 9500, 9501, 9502, 9515, 9516, 9517, 9526, 9533, 9534, 9539, 9540, 9542, 9543, 9544, 9545, 9546, 9547, 9548, 9562, 9563, 9567, 9569, 9575, 9576, 9578, 9579, 9587, 9588, 9589, 9597, 9605, 9606, 9610, 9611, 9613, 9614, 9615, 9622, 9623, 9628, 9629, 9631, 9632, 9636, 9637, 9638, 9640, 9642, 9644, 9651, 9652, 9654, 9655, 9656, 9659, 9662, 9664, 9666, 9667, 9669, 9670, 9673, 9682, 9683, 9684, 9685, 9686, 9689, 9691, 9692, 9693, 9694, 9695, 9696, 9702, 9703, 9704, 9706, 9707, 9709, 9713, 9715, 9716, 9718, 9719, 9720, 9725, 9726, 9728, 9729, 9733, 9734, 9736, 9737, 9738, 9742, 9744, 9748, 9750, 9752, 9753, 9754, 9768, 9769, 9770, 9773, 9774, 9779, 9780, 9781, 9783, 9784, 9786, 9787, 9789, 9790, 9792, 9795, 9797, 9798, 9799, 9800, 9801, 9802, 9805, 9808, 9812, 9813, 9814, 9815, 9817, 9818, 9823, 9824, 9825, 9827, 9831, 9832, 9835, 9837, 9844, 9845, 9846, 9847, 9849, 9850, 9851, 9852, 9853, 9854, 9855, 9856, 9857, 9858, 9859, 9860, 9863, 9866, 9867, 9868, 9869, 9870, 9871, 9872, 9873, 9874, 9875, 9876, 9877, 9878, 9885, 9886, 9896, 9900, 9906, 9907, 9908, 9914, 9916, 9928, 9929, 9930, 9932, 9933, 9934, 9935, 9936, 9937, 9939, 9945, 9949, 9950, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9969, 9970, 9971, 9975, 9977, 9978, 9980, 9981, 9985, 9987, 9988, 9989, 9993, 9995, 9996, 9999, 10002, 10003, 10004, 10005, 10008, 10009, 10010, 10011, 10017, 10018, 10019, 10021, 10025, 10027, 10029, 10034, 10041, 10043, 10050, 10052, 10054, 10056, 10057, 10058, 10059, 10060, 10061, 10062, 10064, 10065, 10066, 10067, 10068, 10069, 10071, 10073, 10074, 10079, 10080, 10081, 10082, 10084, 10085, 10086, 10087, 10088, 10089, 10091, 10092, 10093, 10094, 10095, 10097, 10098, 10099, 10101, 10102, 10103, 10104, 10105, 10106, 10112, 10113, 10115, 10116, 10117, 10118, 10121, 10124, 10125, 10126, 10127, 10129, 10130, 10132, 10133, 10135, 10137, 10138, 10139, 10140, 10143, 10145, 10146, 10147, 10151, 10153, 10155, 10156, 10158, 10159, 10160, 10162, 10163, 10164, 10165, 10166, 10169, 10170, 10174, 10176, 10177, 10178, 10179, 10180, 10181, 10183, 10186, 10187, 10188, 10196, 10198, 10200, 10201, 10202, 10203, 10206, 10207, 10208, 10209, 10210, 10211, 10212, 10213, 10214, 10215, 10216, 10219, 10220, 10221, 10224, 10231, 10232, 10233, 10238, 10239, 10240, 10243, 10246, 10247, 10248, 10260, 10261, 10262, 10263, 10264, 10266, 10271, 10272, 10275, 10276, 10277, 10278, 10279, 10282, 10283, 10286, 10288, 10290, 10291, 10292, 10293, 10297, 10298, 10300, 10301, 10302, 10303, 10319, 10321, 10322, 10323, 10324, 10327, 10328, 10331, 10333, 10334, 10341, 10342, 10343, 10344, 10345, 10346, 10350, 10351, 10352, 10353, 10354, 10355, 10357, 10359, 10361, 10364, 10365, 10366, 10367, 10370, 10373, 10374, 10375, 10376, 10378, 10379, 10382, 10384, 10385, 10386, 10388, 10389, 10394, 10397, 10401, 10402, 10403, 10405, 10406, 10407, 10408, 10409, 10410, 10415, 10416, 10417, 10418, 10419, 10421, 10422, 10423, 10424, 10425, 10426, 10427, 10429, 10430, 10431, 10434, 10435, 10436, 10437, 10438, 10439, 10442, 10443, 10444, 10445, 10446, 10447, 10448, 10449, 10450, 10451, 10453, 10454, 10455, 10456, 10457, 10458, 10459, 10460, 10461, 10462, 10463, 10464, 10465, 10468, 10469, 10470, 10472, 10473, 10474, 10479, 10480, 10481, 10493, 10494, 10495, 10497, 10498, 10499, 10500, 10501, 10502, 10503, 10504, 10505, 10506, 10509, 10510, 10511, 10512, 10513, 10515, 10516, 10517, 10518, 10519, 10520, 10521, 10522, 10523, 10524, 10525, 10526, 10527, 10528, 10529, 10530, 10531, 10533, 10534, 10535, 10537, 10538, 10539, 10540, 10551, 10552, 10554, 10555, 10560, 10561, 10562, 10563, 10564, 10565, 10566, 10567, 10568, 10570, 10572, 10575, 10576, 10579, 10583, 10585, 10586, 10587, 10590, 10591, 10592, 10593, 10597, 10598, 10599, 10600, 10601, 10602, 10604, 10605, 10606, 10607, 10608, 10609, 10610, 10611, 10613, 10617, 10618, 10619, 10633, 10636, 10637, 10638, 10641, 10642, 10643, 10645, 10646, 10647, 10648, 10649, 10650, 10651, 10652, 10654, 10655, 10657, 10658, 10659, 10663, 10664, 10665, 10666, 10667, 10668, 10669, 10670, 10671, 10672, 10673, 10674, 10676, 10677, 10678, 10680, 10683, 10684, 10686, 10687, 10688, 10689, 10690, 10691, 10692, 10696, 10699, 10700, 10702, 10703, 10704, 10706, 10708, 10709, 10711, 10712, 10713, 10714, 10715, 10717, 10718, 10719, 10724, 10728, 10730, 10731, 10732, 10733, 10735, 10739, 10741, 10743, 10744, 10745, 10746, 10747, 10748, 10749, 10750, 10752, 10753, 10754, 10757, 10758, 10760, 10761, 10762, 10763, 10764, 10770, 10771, 10773, 10774, 10775, 10776, 10777, 10781, 10783, 10785, 10786, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10800, 10801, 10803, 10804, 10806, 10807, 10808, 10809, 10811, 10812, 10813, 10814, 10815, 10816, 10817, 10818, 10819, 10821, 10822, 10823, 10826, 10827, 10828, 10833, 10834, 10843, 10844, 10845, 10847, 10848, 10850, 10853, 10854, 10856, 10857, 10859, 10864, 10865, 10866, 10867, 10868, 10870, 10871, 10872, 10873, 10874, 10875, 10876, 10877, 10878, 10879, 10883, 10884, 10886, 10887, 10889, 10890, 10891, 10892, 10893, 10894, 10897, 10898, 10899, 10900, 10903, 10906, 10907, 10908, 10909, 10912, 10913, 10914, 10916, 10917, 10918, 10919, 10920, 10921, 10922, 10925, 10927, 10929, 10931, 10932, 10934, 10935, 10938, 10941, 10942, 10943, 10944, 10945, 10947, 10948, 10949, 10950, 10951, 10952, 10956, 10959, 10960, 10962, 10963, 10966, 10969, 10970, 10972, 10974, 10975, 10976, 10977, 10978, 10980, 10981, 10983, 10984, 10986, 10987, 10989, 10990, 10991, 10997, 10998, 10999, 11000, 11001, 11002, 11003, 11004, 11005, 11006, 11007, 11010, 11012, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11021, 11023, 11024, 11027, 11028, 11029, 11030, 11031, 11032, 11033, 11036, 11037, 11039, 11040, 11041, 11044, 11045, 11046, 11047, 11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056, 11057, 11058, 11061, 11062, 11068, 11072, 11073, 11077, 11081, 11084, 11087, 11088, 11089, 11090, 11091, 11093, 11094, 11095, 11096, 11097, 11098, 11099, 11100, 11101, 11102, 11111, 11114, 11115, 11116, 11117, 11120, 11121, 11122, 11123, 11124, 11125, 11131, 11133, 11134, 11135, 11142, 11143, 11144, 11145, 11146, 11147, 11148, 11149, 11150, 11151, 11152, 11153, 11154, 11155, 11157, 11158, 11163, 11165, 11166, 11168, 11169, 11173, 11174, 11176, 11177, 11178, 11180, 11181, 11182, 11183, 11186, 11187, 11188, 11189, 11191, 11192, 11193, 11194, 11195, 11196, 11198, 11199, 11201, 11202, 11203, 11204, 11205, 11207, 11210, 11215, 11216, 11220, 11221, 11223, 11224, 11225, 11226, 11227, 11228, 11229, 11231, 11232, 11233, 11234, 11235, 11236, 11238, 11239, 11240, 11241, 11243, 11244, 11245, 11246, 11247, 11249, 11250, 11251, 11253, 11255, 11256, 11257, 11259, 11262, 11263, 11266, 11270, 11271, 11274, 11277, 11278, 11279, 11281, 11282, 11283, 11284, 11285, 11286, 11288, 11289, 11290, 11292, 11299, 11301, 11302, 11303, 11305, 11311, 11312, 11320, 11321, 11322, 11323, 11324, 11325, 11326, 11327, 11328, 11329, 11330, 11331, 11332, 11335, 11336, 11339, 11340, 11341, 11342, 11343, 11345, 11348, 11349, 11350, 11351, 11352, 11353, 11356, 11357, 11358, 11359, 11361, 11362, 11363, 11364, 11365, 11369, 11370, 11372, 11374, 11375, 11376, 11378, 11380, 11381, 11382, 11384, 11385, 11386, 11387, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11405, 11406, 11407, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417, 11418, 11420, 11423, 11424, 11426, 11427, 11430, 11431, 11432, 11433, 11434, 11436, 11438, 11439, 11440, 11441, 11442, 11443, 11444, 11445, 11446, 11447, 11448, 11449, 11450, 11451, 11452, 11453, 11454, 11455, 11458, 11459, 11460, 11464, 11467, 11468, 11469, 11470, 11471, 11472, 11473, 11477, 11478, 11479, 11480, 11482, 11483, 11484, 11485, 11486, 11487, 11488, 11490, 11491, 11492, 11493, 11494, 11495, 11496, 11497, 11498, 11500, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11509, 11514, 11515, 11516, 11517, 11518, 11519, 11522, 11524, 11526, 11527, 11530, 11532, 11533, 11534, 11535, 11536, 11538, 11539, 11540, 11542, 11543, 11544, 11545, 11546, 11547, 11548, 11554, 11555, 11556, 11562, 11563, 11566, 11568, 11569, 11570, 11571, 11572, 11573, 11575, 11576, 11577, 11578, 11579, 11580, 11586, 11589, 11590, 11591, 11592, 11600, 11602, 11603, 11604, 11605, 11606, 11607, 11608, 11609, 11610, 11611, 11612, 11613, 11614, 11615, 11617, 11618, 11622, 11625, 11627, 11628, 11629, 11631, 11632, 11633, 11634, 11635, 11636, 11637, 11639, 11640, 11641, 11643, 11644, 11645, 11646, 11647, 11648, 11649, 11650, 11655, 11656, 11657, 11658, 11659, 11660, 11661, 11662, 11664, 11665, 11666, 11667, 11669, 11673, 11675, 11676, 11679, 11681, 11684, 11685, 11686, 11687, 11688, 11689, 11691, 11692, 11693, 11694, 11695, 11700, 11704, 11706, 11711, 11713, 11723, 11724, 11725, 11727, 11729, 11731, 11732, 11738, 11739, 11740, 11741, 11743, 11744, 11749, 11750, 11756, 11757, 11758, 11759, 11760, 11761, 11762, 11764, 11765, 11767, 11768, 11769, 11770, 11773, 11774, 11779, 11780, 11782, 11783, 11790, 11791, 11792, 11795, 11797, 11798, 11800, 11801, 11802, 11803, 11804, 11807, 11808, 11810, 11811, 11817, 11818, 11820, 11822, 11823, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11837, 11839, 11840, 11842, 11843, 11844, 11848, 11850, 11852, 11853, 11855, 11864, 11867, 11868, 11869, 11871, 11872, 11873, 11874, 11875, 11876, 11880, 11884, 11885, 11886, 11889, 11890, 11891, 11893, 11894, 11895, 11897, 11898, 11899, 11901, 11902, 11903, 11905, 11906, 11907, 11908, 11910, 11917, 11918, 11919, 11920, 11921, 11922, 11923, 11924, 11926, 11927, 11931, 11932, 11933, 11934, 11935, 11936, 11937, 11939, 11940, 11942, 11944, 11945, 11946, 11947, 11948, 11949, 11950, 11953, 11955, 11957, 11960, 11961, 11962, 11963, 11965, 11966, 11968, 11969, 11970, 11971, 11973, 11974, 11975, 11976, 11977, 11979];
    let disqualified = [11090, 11831, 9622, 10699, 9098, 9124, 10657, 11741, 11589, 11811, 9673, 10351, 9471, 11962, 11631, 11676, 10300, 10568, 10859, 11401, 10806, 11382, 11405, 9613, 9614, 10069, 10224, 9417, 11685, 9381, 9863, 10451, 10775, 9651, 10748, 9667, 10019, 10126, 10472, 11757, 9981, 11591, 10877, 11539, 10435, 10528, 10664, 11376, 10984, 9502, 9744, 9774, 10388, 10665, 11570, 9971, 11614, 11031, 11830, 9534, 10378, 9212, 9790, 10443, 10879, 11931, 11632, 9628, 11284, 11556, 9137, 11044, 10365, 11829, 11798, 11406, 9957, 10645, 11019, 11874, 11876, 11468, 11711, 11081, 9886, 10091, 11068, 11448, 10106, 9106, 10319, 10990, 11534, 10354, 9290, 11542, 10166, 11271, 11732, 10385, 10497, 11443, 11548, 11922, 11052, 11790, 10165, 10712, 11151, 11906, 11383, 9226, 9229, 9400, 9838, 10785]
    let query = '';

    function addTeam(team: number, state: string, points: number | null, rankCategory: number | null, rankTotal: number | null) {
        query += `UPDATE fyziklani_team
                  SET state         = '${state}',
                      points        = ${points ?? 'NULL'},
                      rank_category = ${rankCategory ?? 'NULL'},
                      rank_total    = ${rankTotal ?? 'NULL'}
                  WHERE fyziklani_team_id = ${team}
                    AND event_id = 189;  `;
    }

    const sorted = points.sort((a, b) => {
        if (a.team.disqualified !== b.team.disqualified) {
            return (a.team.disqualified ? 1 : 0) - (b.team.disqualified ? 1 : 0);
        }
        if (a.points === b.points) {
            return a.lastSubmit > b.lastSubmit ? 1 : -1;
        } else {
            return b.points - a.points;
        }
    });

    const sorted_participated = sorted.filter(t => participated.includes(t.team.teamId));

    for (let i = 0; i < sorted_participated.length; i++) {
        const team = sorted_participated[i];
        const state = disqualified.includes(team.team.teamId) ? 'disqualified' : participated.includes(team.team.teamId) ? 'participated' : 'missed';
        const rankTotal = sorted_participated.slice(0, i).filter(t => !disqualified.includes(t.team.teamId)).length + 1;
        const rankCategory = sorted_participated.slice(0, i).filter(t => t.team.category === team.team.category && !disqualified.includes(t.team.teamId)).length + 1;
        addTeam(team.team.teamId, state, state == 'participated' ? team.points : null, state == 'participated' ? rankCategory : null, state == 'participated' ? rankTotal : null);
    }

    console.log(query); // writes the output to the browser console
}

const useToggle = (initialState: boolean = false): [boolean, () => void] => {
    const [state, setState] = useState(initialState);
    const toggle = useCallback(() => setState(state => !state), []);
    return [state, toggle];
}

export const ForVisibleResults: React.FC<{ data: DataInterface<true>, teams: Team[] }> = ({ data, teams }) => {
    const points = useTeamPoints(data);
    const [showFull, toggleShowFull] = useToggle();
    const lang = useContext(LangContext);
    const mappedTeams = useMemo(() => Object.fromEntries(teams.map(t => [t.teamId, t])), [teams]);

    return <>
        <div className="row strips">
            {data.categories.map(c =>
                <div className="col-md">
                    <CategoryColumn category={c} points={points} showFull={showFull} mappedTeams={mappedTeams} />
                </div>,
            )}
        </div>
        {showFull && false && <div className="row">
            <CategoryColumn category={'O'} points={points} showFull={true} mappedTeams={mappedTeams} />
        </div>}
        <button onClick={toggleShowFull} className="btn btn-panel-action">{showFull ? (
            lang === 'cs' ? 'Skrýt' : 'Hide'
        ) : (
            lang === 'cs' ? 'Zobrazit všechny týmy' : 'Show all teams'
        )}</button>
    </>;
}

export const ForHiddenResults: React.FC<{ data: DataInterface }> = memo(({ data }) => {
    const lang = useContext(LangContext);
    return <div className={'hidden-results'}>
        {lang === 'cs' ? 'Výsledky jsou před koncem soutěže skryté.' : 'Results are hidden before the end of the competition.'}
    </div>;
});

const CATEGORY_NAMES = {
    A: 'A',
    B: 'B',
    C: 'C',
    O: 'Open',
}

const CategoryColumn: React.FC<{
    category: string,
    points: ReturnType<typeof useTeamPoints> | null,
    showFull: boolean,
    mappedTeams: Record<number, Team>,
}>
    = memo(({ category, points, showFull, mappedTeams }) => {
        const lang = useContext(LangContext);
        //generateSQL(points); // writes the output to the browser console

        const sorted = useMemo(() => points
            ?.filter(p => p.team.category === category)
            .sort((a, b) => {
                if (a.team.disqualified !== b.team.disqualified) {
                    return (a.team.disqualified ? 1 : 0) - (b.team.disqualified ? 1 : 0);
                }
                if (a.points === b.points) {
                    if (a.points === 0) {
                        return a.team.teamId - b.team.teamId;
                    } else {
                        return a.lastSubmit > b.lastSubmit ? 1 : -1;
                    }
                } else {
                    return b.points - a.points;
                }
            },
            ).filter((_, i) => showFull || i < 10), [points, showFull]);

        return <>
            <div className="category-title">
                {lang === 'cs' ?
                    <>Kategorie {CATEGORY_NAMES[category as keyof typeof CATEGORY_NAMES]}</> :
                    <>{CATEGORY_NAMES[category as keyof typeof CATEGORY_NAMES]} category</>
                }
            </div>
            <table>
                {sorted?.map((p, i) => <tr className={p.points || p.team.disqualified ? '' : 'zero-points'}>
                    <td>{p.team.disqualified ? 'DSQ' : (p.points ? `${i + 1}.` : '-')}</td>
                    <td>
                        <div className="team-name">{mappedTeams[p.team.teamId]?.name ?? p.team.name}</div>
                        <div className="flags">
                            {[...new Set(mappedTeams[p.team.teamId]?.participants.map(p => p.countryIso))].filter(iso => iso !== '').map(iso =>
                                <span className={`fi fi-${iso?.toLowerCase()}`} />,
                            )}
                        </div>
                    </td>
                    <td>{p.team.disqualified ? 'x' : p.points}</td>
                </tr>)}
            </table>
        </>;
    });
